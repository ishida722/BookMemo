テストと読みやすさ
======================

# 最初のテスト

```cpp
// 'docs' をスコアでソートする（降順）。マイナスのスコアは削除する。
void SortAndFilterDocs(vector<ScoredDocument>* docs);
```

```cpp
void Test1() {
    vector<ScoredDocument> docs;
    docs.resize(5);
    docs[0].url = "http://example.com";
    docs[0].score = -5.0;
    docs[1].url = "http://example.com";
    docs[1].score = 1;
    docs[2].url = "http://example.com";
    docs[2].score = 4;
    docs[3].url = "http://example.com";
    docs[3].score = -99998.7;
    docs[4].url = "http://example.com";
    docs[4].score = 3.0;

    SortAndFilterDocs(&docs);

    assert(docs.size() == 3);
    assert(docs[0].score == 4);
    assert(docs[1].score == 3.0);
    assert(docs[2].score == 1);
}
```

# 14.3 テストを読みやすくする

テストの設計原則

**大切でない詳細はユーザから隠し、大切な詳細は目立つようにするべき**

上記のテストコードはオブジェクト設定の詳細ばかり目立って大切な部分がどこだかわからない。ヘルパー関数で整理する。

テストにおいて重要でない項目はヘルパー関数のなかに押しこんでしまう。

```cpp
void AddScoredDoc(vector<ScoredDocument>& docs, double score) {
    ScoredDocument sd;
    sd.score = score;
    sd.url = "http://example.com";
    docs.push_back(sd);
}
```

```cpp
void Test1() {
    vector<ScoredDocument> docs;
    AddScoredDoc(docs, -5.0);
    AddScoredDoc(docs, 1);
    AddScoredDoc(docs, 4);
    AddScoredDoc(docs, -99998.7);
    ...
}
```

## 最小のテストをつくる

書きなおしたテストコードが何をしているか考えてみる。

* 文書(docs)のスコアは[-5, 1, 4, -99998.7, 3]に設定する
* テスト対象関数を呼ぶとソートされて、[4, 3, 1]の順になる
* この順番になっているかチェックする

これら一連の作業を一行で片づけてしまうような関数をつくる。

```cpp
CheckScoresBeforeAfter("-5, 1, 4, -99998.7, 3", "4, 3, 1");
```

これで後からテストを追加するのが楽になった

## 1つの機能に複数のテスト

小さなテストを複数つくり、機能を検証する。

```cpp
CheckScoresBeforeAfter("2, 1, 3", "3, 2, 1");   // ソート
CheckScoresBeforeAfter("0, -0.1, -10", "0");    // マイナスは削除
CheckScoresBeforeAfter("1, -2, 1, -2", "1, 1"); // 重複は許可
CheckScoresBeforeAfter("", "");                 // 空の入力は許可
```

#14.6 テストの機能に名前をつける

テストの名前に含むといい情報

* テストするクラス
* テストする関数
* テストする状況やバグ

### 例

```cpp
void Test_SortAndFilterDocs() {
...
}

void Test_SortAndFilterDocs_BasicSorting(){
...
}

void Test_SortAndFilterDocs_NegativeValues() {
...
}
```

テストは他のコードから呼びだされることがないので長くても気にしない、コメントだとおもえばいい

# テストについてのまとめ

* テストのトップレベルはできるだけ簡潔にする。入出力のテストは1行で記述できるといい
* テストが失敗したらバグの発見がしやすいエラーを表示する
* テストに有効な最も単純じゃ入力値を使う
* 何をテストしてるのかわかりやすい名前をつける
