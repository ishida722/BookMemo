集合
====

要素の集合を処理したいとき、それらの要素が小さな整数で表現できるときは、各要素が含まれるかどうかを特定のビットに対応するようにして集合を表現する。

.. code:: c

    pbitvec[j/BITS_PER_LONG] |= ((unsigned long)1 << (j % BITS_PER_LONG));

配列pbitvec はそれぞれが
BITS\_PER\_LONG個の\ **ビット**\ からなるLong整数。よって各要素はBITS\_PER\_LONG個の情報を格納できる。
なので、集合要素数jをBITS\_PER\_LONGで割れば、特定の要素についての情報が含まれている配列位置がわかる。

ここで言う集合要素数jというのは\ **ビット**\ である。Long
が32ビットで、33ビット目の要素がどこにいるか知りたいときは、33/32 = 1
となり 配列[1]にいることがわかる。さらに、33 % 32 = 1
となるので配列[1]の1ビット目ということがわかる。

上の例では配列中のビット位置だけ値をシフトすることによって、状態を記録することができる。

要素が集合に含まれているかテスト

.. code:: c

    #define FD_ISSET(n, p) \
        ((p)->fds_bits[(n)/NFDBITS] & (1 << ((n) % NFDBITS)))

ポインタとビット(要素)を与える。 fds\_bits
というのがポインタがメンバとして持つ集合。
集合内部で要素がどの配列番号に属しているかを n/NFDBITS で出す
配列要素と存在を確認したいビットだけを立てた値を and すると
もし要素が存在するなら true が返ってくる。

集合から要素を削除

.. code:: c

    #define FD_CLR(n, p) \
        ((p)->fds_bits[(n)/NFDBITS] &= ̃~(1 << ((n) % NFDBITS)))

上と同様にして、削除したいビットだけ立てた値をひっくりかえして &=
すると当該ビットだけ消える。

.. code:: c

    resourceQuarks[q >> 3] |= 1 << (q & 0x7);
