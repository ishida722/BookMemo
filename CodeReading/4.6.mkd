集合
====

要素の集合を処理したいとき、それらの要素が小さな整数で表現できるときは、各要素が含まれるかどうかを特定のビットに対応するようにして集合を表現する。

```c
pbitvec[j/BITS_PER_LONG] |= ((unsigned long)1 << (j % BITS_PER_LONG));
```

配列pbitvec はそれぞれが BITS_PER_LONG個の**ビット**からなるLong整数。よって各要素はBITS_PER_LONG個の情報を格納できる。
なので、集合要素数jをBITS_PER_LONGで割れば、特定の要素についての情報が含まれている配列位置がわかる。

ここで言う集合要素数jというのは**ビット**である。Long が32ビットで、33ビット目の要素がどこにいるか知りたいときは、33/32 = 1 となり
配列[1]にいることがわかる。さらに、33 % 32 = 1 となるので配列[1]の1ビット目ということがわかる。

上の例では配列中のビット位置だけ値をシフトすることによって、状態を記録することができる。

要素が集合に含まれているかテスト

```c
#define FD_ISSET(n, p) \
    ((p)->fds_bits[(n)/NFDBITS] & (1 << ((n) % NFDBITS)))
```

集合から要素を削除

```c
#define FD_CLR(n, p) \
    ((p)->fds_bits[(n)/NFDBITS] &= ̃(1 << ((n) % NFDBITS)))
```
