マップ
======

配列インデックスをつかって要素にアクセスするのが一番高速。

つぎからつぎへとどんどんデータをバッファにつっこんで、それを最後か最初から順にとりだしていく場合は、スタックやキューが必要。

しかし保存するデータが明確で、保存する場所を指定できるなら、配列の添字でアクセスするのが速くていい。


# テーブル駆動プログラム操作

```c
static struct key { // 構造体の定義
    char *name;
    void (*f)(struct info *); // 関数ポインタ info 構造体のポインタを引数にとる
    [...]
} keys[] = { // 構造体配列の宣言と初期化
    // 名前と関数を与えてインスタンスを生成している
    { "all", f_all, 0 },
    { "cbreak", f_cbreak, F_OFFOK },
    [...]
    { "tty", f_tty, 0 },
};
[...]

int
ksearch(char ***argvp, struct info *ip)
{
    char *name;
    struct key *kp, tmp;
    name = **argvp;
    [...]
    tmp.name = name; // keyインスタンスの名前を決定
    if (!(kp = (struct key *)bsearch(&tmp, keys,
        sizeof(keys)/sizeof(struct key), sizeof(struct key), c_key)) // テーブルからコマンドを探す
        return (0);
    [...]
    kp->f(ip);
    return (1);
}
void
f_all(struct info *ip)
{
    print(&ip->t, &ip->win, ip->ldisc, BSD);
}
```

プログラムの制御要素をエンコードするのに配列を使うことで、プログラムを完全にテーブル駆動操作にできる。

データ要素とその要素の処理関数へのポインタを各位置に格納することで、データをコードに関連づけられる。
難しい言い回しだけれど、データと関数ポインタを持つ構造体を定義しておくと、そこにいれるデータと関数は配列でずらっと表現できるってことだろう。

C言語でオブジェクト指向的な実装をするための工夫。データとコードを関連づけるっていうのはつまりオブジェクトだし。
