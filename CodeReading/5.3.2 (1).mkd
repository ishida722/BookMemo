制御モデル
==========

* ワーククルーモデル。類似した一連のタスクを並列的に実行する。
* ボス/ワーカーモデル。ボスがワーカーに作業を配分する。
* パイプラインモデル。データを中心に一連のタスクを実行し、データを次のタスクに渡す。


## ワーククルーモデル
```c
main(int argc, char **argv)
{
    [...]
    /* start all but one here */
    for (i=1; i<nthreads; i++) {
        closure = (struct closure *) xalloc(sizeof(struct closure));
        xthread_fork(do_ico_window, closure);
        // ウィンドウのスレッドを開始
    }
    [...]

    void * do_ico_window(closure)
    struct closure *closure;
{
```

複数のウィンドウにバウンドする図形を描画する。
実行されるコードはdo_ico_window()のみ。
各ウィンドウは関数を実行する別々のスレッドで処理される。
スレッドはグローバルメモリを共有する。
closure 構造体はスレッドの状態を管理する。

スレッド開始関数は実行対象の関数とそのスレッドの関数インスタンスに渡されるパラメータを指定する。

## ボス/ワーカーモデル
ボスとなるタスクがワーカータスクに作業を割り振る。

```c
param = (XAmChanDesc **) xalloc(sizeof(XAmChanDesc *));
*param = chandesc;
result = thread_newthread(XAmReaderThread, THREAD_STACK_SIZE,
            (char *)param, sizeof(XAmChanDesc *));

[...]
if (thread_newthread(TcpIpReaderThread, MAXBUFSIZE + CONNECTOR_STACK,
        (char *)param, sizeof(XAmChanDesc *)) == 0) {
    Error(("TCPconn refused: Cannot start reader thread\n")) ;
[...]
if (thread_newthread(AmConnectorThread,
        CONNECTOR_STACK, 0, 0) <= 0) {
    Fatal(("Cannot start Amoeba connector thread\n")) ;
}
[...]
if (thread_newthread(AmTCPConnectorThread,
    CONNECTOR_STACK, 0, 0) <= 0)
    Fatal(("Cannot start TCP connector thread\n")) ;
``

