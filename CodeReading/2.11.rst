制御構造再考
============

ループ、バリアントとインバリアント
==================================

-  バリアント
-  インバリアント : ループの開始時と終了時の両方で成り立つアサーション

配列内の最大値を探す関数
------------------------

.. code:: c

    max = depths[n];
    while(n--)
    {
        if(depths[n] > max)
            max = depths[n];
    }

n は配列 depths の最後を指している。 n = 5
とすると、6個の要素を持つ配列で、max
には最初、配列の6番目の値が保存される。

while で n を減らしながらmaxよりも大きい値が出てくれば max を更新する。

配列の要素の個数を n0 とすると、ループ終了時のmaxは

::

    max = maximum{depths[0:n0)}

ここからインバリアントは次のようになる。

::

    max = maximum{depths[n:n0)}

インバリアントはループ開始時も終了時も成り立つ。

むずかしいけどインバリアントを設定してそれが開始時と終了時で評価して成り立てばそのループが保証されるということなのだろうか。

二分探索のインバリアント
========================

探している値がある特定の範囲内に存在する事実をインバリアントする。
